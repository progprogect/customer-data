import React, { useState, useEffect } from 'react'
import './ChurnPredictionPage.css'

interface ChurnStatistics {
  total_records: number
  churn_count: number
  retention_count: number
  churn_rate_percent: number
  unique_users: number
  date_range: {
    earliest: string | null
    latest: string | null
  }
}

interface UserFeatures {
  user_id: number
  snapshot_date: string
  recency_days: number | null
  frequency_90d: number
  monetary_180d: number
  aov_180d: number | null
  orders_lifetime: number
  revenue_lifetime: number
  categories_unique: number
}

interface ChurnPrediction {
  user_id: number
  snapshot_date: string
  prob_churn_next_60d: number
  will_churn: boolean
  top_reasons: string[]
}

interface UserWithPrediction {
  user_info: {
    user_id: number
    email: string
    created_at: string
    last_login_at: string | null
  } | null
  features: UserFeatures
  prediction: ChurnPrediction
}

const ChurnPredictionPage: React.FC = () => {
  const [statistics, setStatistics] = useState<ChurnStatistics | null>(null)
  const [highRiskUsers, setHighRiskUsers] = useState<UserWithPrediction[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [threshold, setThreshold] = useState(0.6)
  const [limit, setLimit] = useState(20)

  const API_BASE = 'http://localhost:8000/api/v1/churn'
  const API_KEY = 'dev-token-12345'

  useEffect(() => {
    loadData()
  }, []) // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

  const loadData = async (customThreshold?: number, customLimit?: number) => {
    setLoading(true)
    setError(null)

    const currentThreshold = customThreshold !== undefined ? customThreshold : threshold
    const currentLimit = customLimit !== undefined ? customLimit : limit

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [statsResponse, usersResponse] = await Promise.all([
        fetch(`${API_BASE}/statistics`, {
          headers: {
            'Authorization': `Bearer ${API_KEY}`,
            'Content-Type': 'application/json'
          }
        }),
        fetch(`${API_BASE}/high-risk-users`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${API_KEY}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            threshold: currentThreshold,
            limit: currentLimit,
            snapshot_date: '2025-07-14'
          })
        })
      ])

      if (!statsResponse.ok || !usersResponse.ok) {
        const errorText = !statsResponse.ok ? 
          `Statistics API error: ${statsResponse.status}` : 
          `Users API error: ${usersResponse.status}`
        throw new Error(errorText)
      }

      const [statsData, usersData] = await Promise.all([
        statsResponse.json(),
        usersResponse.json()
      ])

      setStatistics(statsData)
      setHighRiskUsers(usersData)
    } catch (err) {
      // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      
      if (err instanceof Error) {
        errorMessage = err.message
      } else if (typeof err === 'string') {
        errorMessage = err
      } else {
        // –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
        try {
          errorMessage = JSON.stringify(err)
        } catch {
          errorMessage = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å)'
        }
      }
      
      setError(errorMessage)
    } finally {
      setLoading(false)
    }
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('ru-RU')
  }

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB'
    }).format(amount)
  }

  const getRiskLevel = (probability: number) => {
    if (probability >= 0.8) return { level: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π', class: 'critical' }
    if (probability >= 0.6) return { level: '–í—ã—Å–æ–∫–∏–π', class: 'high' }
    if (probability >= 0.4) return { level: '–°—Ä–µ–¥–Ω–∏–π', class: 'medium' }
    return { level: '–ù–∏–∑–∫–∏–π', class: 'low' }
  }

  if (loading) {
    return (
      <div className="churn-prediction-page">
        <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="churn-prediction-page">
        <div className="error">–û—à–∏–±–∫–∞: {error}</div>
      </div>
    )
  }

  return (
    <div className="churn-prediction-page">
      <div className="page-header">
        <h1>üíî –û—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤</h1>
        <p>–ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ ML –º–æ–¥–µ–ª–∏</p>
      </div>

      {/* KPI –∫–∞—Ä—Ç–æ—á–∫–∏ */}
      {statistics && (
        <div className="kpi-cards">
          <div className="kpi-card">
            <div className="kpi-title">–û–±—â–∏–π –æ—Ç—Ç–æ–∫</div>
            <div className="kpi-value">{statistics.churn_rate_percent}%</div>
            <div className="kpi-subtitle">
              {statistics.churn_count} –∏–∑ {statistics.total_records} –∫–ª–∏–µ–Ω—Ç–æ–≤
            </div>
          </div>
          
          <div className="kpi-card">
            <div className="kpi-title">–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤</div>
            <div className="kpi-value">{statistics.unique_users.toLocaleString()}</div>
            <div className="kpi-subtitle">–≤ –∞–Ω–∞–ª–∏–∑–µ</div>
          </div>
          
          <div className="kpi-card">
            <div className="kpi-title">–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞</div>
            <div className="kpi-value">
              {statistics.date_range.earliest && statistics.date_range.latest
                ? `${formatDate(statistics.date_range.earliest)} - ${formatDate(statistics.date_range.latest)}`
                : '–ù–µ —É–∫–∞–∑–∞–Ω'
              }
            </div>
            <div className="kpi-subtitle">–¥–∞—Ç—ã —Å–Ω–∞–ø—à–æ—Ç–æ–≤</div>
          </div>
          
          <div className="kpi-card">
            <div className="kpi-title">–ö–ª–∏–µ–Ω—Ç—ã –≤ —Ä–∏—Å–∫–µ</div>
            <div className="kpi-value">{highRiskUsers.length}</div>
            <div className="kpi-subtitle">–ø–æ—Ä–æ–≥ {Math.round(threshold * 100)}%</div>
          </div>
        </div>
      )}

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="filters">
        <div className="filter-group">
          <label htmlFor="threshold">–ü–æ—Ä–æ–≥ —Ä–∏—Å–∫–∞ (%):</label>
          <input
            id="threshold"
            type="number"
            min="30"
            max="90"
            step="5"
            value={Math.round(threshold * 100)}
            onChange={(e) => {
              const value = parseInt(e.target.value)
              if (!isNaN(value)) {
                setThreshold(value / 100)
              }
            }}
            className="threshold-input"
          />
        </div>
        
        <div className="filter-group">
          <label htmlFor="limit">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤:</label>
          <input
            id="limit"
            type="number"
            min="1"
            max="500"
            step="1"
            value={limit}
            onChange={(e) => {
              const value = parseInt(e.target.value)
              if (!isNaN(value) && value > 0) {
                setLimit(value)
              }
            }}
            className="limit-input"
          />
        </div>
        
        <button onClick={() => loadData()} className="refresh-btn">
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å
        </button>
      </div>

      {/* –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º */}
      <div className="high-risk-users">
        <h2>üë• –ö–ª–∏–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞</h2>
        
        {highRiskUsers.length === 0 ? (
          <div className="no-data">
            –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞ –≤—ã—à–µ {Math.round(threshold * 100)}%
          </div>
        ) : (
          <div className="users-table">
            <table>
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Email</th>
                  <th>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞</th>
                  <th>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞</th>
                  <th>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞</th>
                  <th>–ó–∞–∫–∞–∑—ã –∑–∞ 90 –¥–Ω–µ–π</th>
                  <th>–¢—Ä–∞—Ç—ã –∑–∞ 180 –¥–Ω–µ–π</th>
                  <th>–ü—Ä–∏—á–∏–Ω—ã —Ä–∏—Å–∫–∞</th>
                </tr>
              </thead>
              <tbody>
                {highRiskUsers.map((user) => {
                  const riskLevel = getRiskLevel(user.prediction.prob_churn_next_60d)
                  return (
                    <tr key={user.features.user_id}>
                      <td>{user.features.user_id}</td>
                      <td>
                        {user.user_info?.email || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                      </td>
                      <td>
                        <div className="probability">
                          {Math.round(user.prediction.prob_churn_next_60d * 100)}%
                        </div>
                      </td>
                      <td>
                        <span className={`risk-level ${riskLevel.class}`}>
                          {riskLevel.level}
                        </span>
                      </td>
                      <td>
                        {user.features.recency_days 
                          ? `${user.features.recency_days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥`
                          : '–ù–µ –ø–æ–∫—É–ø–∞–ª'
                        }
                      </td>
                      <td>{user.features.frequency_90d}</td>
                      <td>{formatCurrency(user.features.monetary_180d)}</td>
                      <td>
                        <div className="reasons">
                          {user.prediction.top_reasons.map((reason, index) => (
                            <span key={index} className="reason-tag">
                              {reason}
                            </span>
                          ))}
                        </div>
                      </td>
                    </tr>
                  )
                })}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="info-section">
        <h3>üìä –û –º–æ–¥–µ–ª–∏</h3>
        <div className="model-info">
          <p>
            <strong>XGBoost –º–æ–¥–µ–ª—å</strong> –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–º 60 –¥–Ω–µ–π.
            –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ 6 –º–µ—Å—è—Ü–µ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç AUC-ROC = 0.63.
          </p>
          <p>
            <strong>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:</strong> —á–∞—Å—Ç–æ—Ç–∞ –ø–æ–∫—É–ø–æ–∫, —Å—É–º–º–∞ —Ç—Ä–∞—Ç, 
            –¥–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤, —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
          </p>
          <p>
            <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong> –∫–ª–∏–µ–Ω—Ç—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –æ—Ç—Ç–æ–∫–∞ –≤—ã—à–µ 60% 
            —Ç—Ä–µ–±—É—é—Ç –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –∏ —É–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –∫–∞–º–ø–∞–Ω–∏–π.
          </p>
        </div>
      </div>
    </div>
  )
}

export default ChurnPredictionPage
