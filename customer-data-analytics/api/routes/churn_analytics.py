"""
Churn Analytics API Routes
FastAPI routes –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤

Author: Customer Data Analytics Team
"""

from fastapi import APIRouter, HTTPException, Depends, status, Query
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from typing import List, Optional, Dict, Any
import logging
from datetime import datetime, date
from pydantic import BaseModel, Field

from services.churn_service import churn_service
from services.ml_service import ml_service

logger = logging.getLogger(__name__)

# Security scheme –¥–ª—è API –∫–ª—é—á–µ–π
security = HTTPBearer()

router = APIRouter()


def verify_api_key(credentials: HTTPAuthorizationCredentials = Depends(security)) -> str:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞"""
    valid_tokens = [
        "dev-token-12345",
        "prod-token-67890"
    ]
    
    if credentials.credentials not in valid_tokens:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid API key",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    return credentials.credentials


class UserFeatures(BaseModel):
    """–ú–æ–¥–µ–ª—å —Ñ–∏—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    snapshot_date: date
    recency_days: Optional[float]
    frequency_90d: int
    monetary_180d: float
    aov_180d: Optional[float]
    orders_lifetime: int
    revenue_lifetime: float
    categories_unique: int


class ChurnPrediction(BaseModel):
    """–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç—Ç–æ–∫–∞"""
    user_id: int
    snapshot_date: date
    prob_churn_next_60d: float = Field(ge=0.0, le=1.0)
    will_churn: bool
    top_reasons: List[str]


class UserWithPrediction(BaseModel):
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º"""
    user_info: Optional[Dict[str, Any]]
    features: UserFeatures
    prediction: ChurnPrediction


class ChurnStatistics(BaseModel):
    """–ú–æ–¥–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç—Ç–æ–∫–∞"""
    total_records: int
    churn_count: int
    retention_count: int
    churn_rate_percent: float
    unique_users: int
    date_range: Dict[str, Optional[str]]


class HighRiskUsersRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º"""
    limit: int = Field(20, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    threshold: float = Field(0.6, ge=0.0, le=1.0, description="–ü–æ—Ä–æ–≥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç—Ç–æ–∫–∞")
    snapshot_date: Optional[str] = Field(None, description="–î–∞—Ç–∞ —Å–Ω–∞–ø—à–æ—Ç–∞ (YYYY-MM-DD)")


@router.get(
    "/statistics",
    response_model=ChurnStatistics,
    summary="Get churn statistics",
    description="–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ—Ç—Ç–æ–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤"
)
async def get_churn_statistics(
    api_key: str = Depends(verify_api_key)
) -> ChurnStatistics:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç—Ç–æ–∫–∞"""
    try:
        logger.info("üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç—Ç–æ–∫–∞")
        
        statistics = churn_service.get_churn_statistics()
        
        return ChurnStatistics(**statistics)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Internal server error: {str(e)}"
        )


@router.get(
    "/high-risk-users",
    response_model=List[UserWithPrediction],
    summary="Get high risk users",
    description="–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞"
)
async def get_high_risk_users(
    limit: int = Query(20, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
    threshold: float = Query(0.6, ge=0.0, le=1.0, description="–ü–æ—Ä–æ–≥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç—Ç–æ–∫–∞"),
    snapshot_date: str = Query(None, description="–î–∞—Ç–∞ —Å–Ω–∞–ø—à–æ—Ç–∞ (YYYY-MM-DD)"),
    api_key: str = Depends(verify_api_key)
) -> List[UserWithPrediction]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞"""
    try:
        logger.info(f"üë• –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º: limit={limit}, threshold={threshold}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ churn –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        if not ml_service.is_churn_model_loaded():
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="Churn prediction model is not loaded"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º (—É–∂–µ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–π ML –º–æ–¥–µ–ª—å—é)
        high_risk_users_data = churn_service.get_high_risk_users(limit=limit, threshold=threshold, snapshot_date=snapshot_date)
        
        if not high_risk_users_data:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞ ‚â•{threshold}")
            return []
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç API
        high_risk_users = []
        for user_data in high_risk_users_data:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_info = churn_service.get_user_info(user_data['user_id'])
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
                user_features = UserFeatures(
                    user_id=user_data['user_id'],
                    snapshot_date=user_data['snapshot_date'],
                    recency_days=user_data['recency_days'],
                    frequency_90d=user_data['frequency_90d'],
                    monetary_180d=user_data['monetary_180d'],
                    aov_180d=user_data['aov_180d'],
                    orders_lifetime=user_data['orders_lifetime'],
                    revenue_lifetime=user_data['revenue_lifetime'],
                    categories_unique=user_data['categories_unique']
                )
                
                prediction = ChurnPrediction(
                    user_id=user_data['user_id'],
                    snapshot_date=user_data['snapshot_date'],
                    prob_churn_next_60d=user_data['prob_churn_next_60d'],
                    will_churn=user_data['will_churn'],
                    top_reasons=user_data['top_reasons']
                )
                
                high_risk_users.append(UserWithPrediction(
                    user_info=user_info,
                    features=user_features,
                    prediction=prediction
                ))
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['user_id']}: {e}")
                continue
        
        logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(high_risk_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º")
        return high_risk_users
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Internal server error: {str(e)}"
        )


@router.post(
    "/high-risk-users",
    response_model=List[UserWithPrediction],
    summary="Get high risk users (POST)",
    description="–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞ —á–µ—Ä–µ–∑ POST –∑–∞–ø—Ä–æ—Å"
)
async def get_high_risk_users_post(
    request: HighRiskUsersRequest,
    api_key: str = Depends(verify_api_key)
) -> List[UserWithPrediction]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞ —á–µ—Ä–µ–∑ POST"""
    try:
        logger.info(f"üë• POST –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º: limit={request.limit}, threshold={request.threshold}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ churn –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        if not ml_service.is_churn_model_loaded():
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="Churn prediction model is not loaded"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º (—É–∂–µ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–π ML –º–æ–¥–µ–ª—å—é)
        high_risk_users_data = churn_service.get_high_risk_users(
            limit=request.limit, 
            threshold=request.threshold, 
            snapshot_date=request.snapshot_date
        )
        
        if not high_risk_users_data:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞ ‚â•{request.threshold}")
            return []
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç API
        high_risk_users = []
        for user_data in high_risk_users_data:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_info = churn_service.get_user_info(user_data['user_id'])
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
                user_features = UserFeatures(
                    user_id=user_data['user_id'],
                    snapshot_date=user_data['snapshot_date'],
                    recency_days=user_data['recency_days'],
                    frequency_90d=user_data['frequency_90d'],
                    monetary_180d=user_data['monetary_180d'],
                    aov_180d=user_data['aov_180d'],
                    orders_lifetime=user_data['orders_lifetime'],
                    revenue_lifetime=user_data['revenue_lifetime'],
                    categories_unique=user_data['categories_unique']
                )
                
                prediction = ChurnPrediction(
                    user_id=user_data['user_id'],
                    snapshot_date=user_data['snapshot_date'],
                    prob_churn_next_60d=user_data['prob_churn_next_60d'],
                    will_churn=user_data['will_churn'],
                    top_reasons=user_data['top_reasons']
                )
                
                high_risk_users.append(UserWithPrediction(
                    user_info=user_info,
                    features=user_features,
                    prediction=prediction
                ))
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['user_id']}: {e}")
                continue
        
        logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(high_risk_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º")
        return high_risk_users
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Internal server error: {str(e)}"
        )


@router.get(
    "/user/{user_id}/features",
    response_model=UserFeatures,
    summary="Get user features",
    description="–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è churn prediction"
)
async def get_user_features(
    user_id: int,
    snapshot_date: date,
    api_key: str = Depends(verify_api_key)
) -> UserFeatures:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logger.info(f"üë§ –ó–∞–ø—Ä–æ—Å —Ñ–∏—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {snapshot_date}")
        
        features = churn_service.get_user_features(user_id, snapshot_date)
        
        if features is None:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Features not found for user {user_id} on {snapshot_date}"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º user_id –∏ snapshot_date
        features['user_id'] = user_id
        features['snapshot_date'] = snapshot_date
        
        return UserFeatures(**features)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Internal server error: {str(e)}"
        )


@router.get(
    "/health",
    summary="Health check",
    description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è churn analytics —Å–µ—Ä–≤–∏—Å–∞"
)
async def churn_health_check():
    """Health check –¥–ª—è churn analytics"""
    try:
        model_loaded = ml_service.is_churn_model_loaded()
        
        return {
            "status": "healthy" if model_loaded else "unhealthy",
            "churn_model_loaded": model_loaded,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Churn analytics health check error: {e}")
        return {
            "status": "unhealthy",
            "reason": f"error: {str(e)}",
            "timestamp": datetime.now().isoformat()
        }
