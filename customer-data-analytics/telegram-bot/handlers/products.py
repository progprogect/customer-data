"""
Products Handler
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —Ç–æ–≤–∞—Ä–æ–≤
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging
import httpx

logger = logging.getLogger(__name__)

API_BASE_URL = "http://localhost:8000"


async def products_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /products"""
    await products_callback(update, context)


async def products_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "products_main":
        await show_products_main(query)
    elif query.data == "products_list":
        await show_products_list(query)
    elif query.data == "products_categories":
        await show_categories(query)
    elif query.data == "products_popular":
        await show_popular_products(query)
    elif query.data == "products_search":
        await show_product_search(query)
    elif query.data == "products_back":
        await show_products_main(query)


async def show_products_main(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤"""
    keyboard = [
        [
            InlineKeyboardButton("üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="products_list"),
            InlineKeyboardButton("üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="products_categories")
        ],
        [
            InlineKeyboardButton("üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ", callback_data="products_popular"),
            InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="products_search")
        ],
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = """
üì¶ <b>–¢–æ–≤–∞—Ä—ã</b>

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∞.

<b>–§—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ <b>üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ <b>üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ <b>üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ</b> - —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
‚Ä¢ <b>üîç –ü–æ–∏—Å–∫</b> - –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    """
    
    await query.edit_message_text(
        text,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def show_products_list(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_BASE_URL}/api/v1/products/?limit=10")
            products = response.json()
        
        if not products:
            text = "üì¶ <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            text = "üì¶ <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
            for product in products[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 10
                text += f"‚Ä¢ <b>{product.get('title', 'N/A')}</b>\n"
                text += f"  üè∑Ô∏è {product.get('category', 'N/A')} | üí∞ ${product.get('price', 0):.2f}\n"
                text += f"  üè™ {product.get('brand', 'N/A')}\n\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="products_list")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="products_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"Error fetching products list: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="products_main")]
            ])
        )


async def show_categories(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_BASE_URL}/api/v1/products/categories/")
            categories = response.json()
        
        if not categories:
            text = "üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            text = "üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
            for category in categories:
                text += f"‚Ä¢ {category}\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="products_categories")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="products_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"Error fetching categories: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="products_main")]
            ])
        )


async def show_popular_products(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_BASE_URL}/api/v1/products/popular/?limit=10")
            products = response.json()
        
        if not products:
            text = "üî• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</b>\n\n–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            text = "üî• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</b>\n\n"
            for i, product in enumerate(products, 1):
                text += f"{i}. <b>{product.get('title', 'N/A')}</b>\n"
                text += f"   üí∞ ${product.get('price', 0):.2f} | üè™ {product.get('brand', 'N/A')}\n\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="products_popular")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="products_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"Error fetching popular products: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="products_main")]
            ])
        )


async def show_product_search(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
    text = """
üîç <b>–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤</b>

–î–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤–≤–µ–¥–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.

<b>–§–æ—Ä–º–∞—Ç:</b> <code>search:–∑–∞–ø—Ä–æ—Å</code>

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ <code>search:iphone</code> - –ø–æ–∏—Å–∫ iPhone
‚Ä¢ <code>search:–∫—Ä–æ—Å—Å–æ–≤–∫–∏</code> - –ø–æ–∏—Å–∫ –∫—Ä–æ—Å—Å–æ–≤–æ–∫
‚Ä¢ <code>search:nike</code> - –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ Nike

<b>–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ:</b>
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏—é
‚Ä¢ –ë—Ä–µ–Ω–¥—É
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="products_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text,
        parse_mode='HTML',
        reply_markup=reply_markup
    )

