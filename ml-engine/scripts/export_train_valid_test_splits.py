#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Export Train/Valid/Test Splits to CSV
–≠–∫—Å–ø–æ—Ä—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ø–ª–∏—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ CSV —Ñ–∞–π–ª—ã –¥–ª—è ML –æ–±—É—á–µ–Ω–∏—è

Author: Customer Data Analytics Team
"""

import psycopg2
import pandas as pd
import logging
import sys
import os
from datetime import datetime
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('export_splits.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DB_CONFIG = {
    'host': 'localhost',
    'dbname': 'customer_data',
    'user': 'mikitavalkunovich',
    'password': '',
    'port': 5432
}

def connect_to_db() -> psycopg2.extensions.connection:
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return conn
    except psycopg2.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

def export_split_to_csv(conn: psycopg2.extensions.connection, split_name: str) -> dict:
    """
    –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ø–ª–∏—Ç–∞ –≤ CSV
    
    Args:
        conn: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        split_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–ª–∏—Ç–∞ ('train', 'valid', 'test')
        
    Returns:
        dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
    """
    query = f"""
    SELECT 
        user_id,
        snapshot_date,
        recency_days,
        frequency_90d,
        monetary_180d,
        aov_180d,
        orders_lifetime,
        revenue_lifetime,
        categories_unique,
        purchase_next_30d::int as target
    FROM ml_training_dataset 
    WHERE split = '{split_name}'
    ORDER BY user_id, snapshot_date
    """
    
    try:
        df = pd.read_sql_query(query, conn)
        
        # –ò–º—è —Ñ–∞–π–ª–∞
        filename = f'{split_name}_set.csv'
        df.to_csv(filename, index=False)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            'split': split_name,
            'filename': filename,
            'rows': len(df),
            'columns': len(df.columns),
            'positive_class': int(df['target'].sum()),
            'negative_class': int(len(df) - df['target'].sum()),
            'positive_rate': round(df['target'].mean() * 100, 2),
            'unique_users': df['user_id'].nunique(),
            'unique_dates': df['snapshot_date'].nunique(),
            'date_range': {
                'start': str(df['snapshot_date'].min()),
                'end': str(df['snapshot_date'].max())
            },
            'feature_stats': {
                'recency_mean': round(df['recency_days'].mean(), 2) if df['recency_days'].notna().any() else None,
                'frequency_mean': round(df['frequency_90d'].mean(), 2),
                'monetary_mean': round(df['monetary_180d'].mean(), 2)
            }
        }
        
        logger.info(f"‚úÖ {split_name.upper()} set —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {filename}")
        logger.info(f"   üìä –†–∞–∑–º–µ—Ä: {len(df):,} —Å—Ç—Ä–æ–∫, {len(df.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤")
        logger.info(f"   üéØ Positive rate: {stats['positive_rate']}%")
        
        return stats
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ {split_name} set: {e}")
        return {}

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ø–ª–∏—Ç–æ–≤ –≤ CSV")
    
    conn = None
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        conn = connect_to_db()
        
        # –≠–∫—Å–ø–æ—Ä—Ç –∫–∞–∂–¥–æ–≥–æ —Å–ø–ª–∏—Ç–∞
        splits = ['train', 'valid', 'test']
        all_stats = {}
        
        for split in splits:
            logger.info(f"üîÑ –≠–∫—Å–ø–æ—Ä—Ç {split} set...")
            stats = export_split_to_csv(conn, split)
            if stats:
                all_stats[split] = stats
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_rows = sum(stats['rows'] for stats in all_stats.values())
        
        logger.info("=" * 60)
        logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –≠–ö–°–ü–û–†–¢–ê:")
        logger.info("=" * 60)
        
        for split_name, stats in all_stats.items():
            logger.info(f"{split_name.upper()}:")
            logger.info(f"  ‚Ä¢ –§–∞–π–ª: {stats['filename']}")
            logger.info(f"  ‚Ä¢ –°—Ç—Ä–æ–∫: {stats['rows']:,} ({stats['rows']/total_rows*100:.1f}%)")
            logger.info(f"  ‚Ä¢ Positive rate: {stats['positive_rate']}%")
            logger.info(f"  ‚Ä¢ –ü–µ—Ä–∏–æ–¥: {stats['date_range']['start']} ‚Äî {stats['date_range']['end']}")
            logger.info(f"  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['unique_users']:,}")
            
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ JSON
        export_report = {
            'export_time': datetime.now().isoformat(),
            'total_rows': total_rows,
            'splits': all_stats,
            'files_created': [stats['filename'] for stats in all_stats.values()]
        }
        
        with open('splits_export_report.json', 'w', encoding='utf-8') as f:
            json.dump(export_report, f, indent=2, default=str, ensure_ascii=False)
        
        logger.info(f"üìÅ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(all_stats)}")
        logger.info(f"üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: splits_export_report.json")
        logger.info("‚úÖ –≠–ö–°–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False
        
    finally:
        if conn:
            conn.close()
            logger.info("üîê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
