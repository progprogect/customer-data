"""
Analytics Handler
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging
import httpx

logger = logging.getLogger(__name__)

API_BASE_URL = "http://localhost:8000"


async def analytics_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analytics"""
    await analytics_callback(update, context)


async def analytics_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "analytics_main":
        await show_analytics_main(query)
    elif query.data == "analytics_dashboard":
        await show_dashboard(query)
    elif query.data == "analytics_segmentation":
        await show_segmentation(query)
    elif query.data == "analytics_churn":
        await show_churn_prediction(query)
    elif query.data == "analytics_anomalies":
        await show_anomaly_detection(query)
    elif query.data == "analytics_back":
        await show_analytics_main(query)


async def show_analytics_main(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    keyboard = [
        [
            InlineKeyboardButton("üìà –î–∞—à–±–æ—Ä–¥", callback_data="analytics_dashboard"),
            InlineKeyboardButton("üë• –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è", callback_data="analytics_segmentation")
        ],
        [
            InlineKeyboardButton("‚ö†Ô∏è –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞", callback_data="analytics_churn"),
            InlineKeyboardButton("üîç –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π", callback_data="analytics_anomalies")
        ],
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = """
üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</b>

–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:

‚Ä¢ <b>üìà –î–∞—à–±–æ—Ä–¥</b> - –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∏
‚Ä¢ <b>üë• –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è</b> - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–≤–µ–¥–µ–Ω–∏—é
‚Ä¢ <b>‚ö†Ô∏è –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞</b> - –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞ –ø–æ—Ç–µ—Ä–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ <b>üîç –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π</b> - –ø–æ–∏—Å–∫ –Ω–µ–æ–±—ã—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    """
    
    await query.edit_message_text(
        text,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def show_dashboard(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—à–±–æ—Ä–¥"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_BASE_URL}/api/v1/analytics/dashboard")
            data = response.json()
        
        text = f"""
üìà <b>–î–∞—à–±–æ—Ä–¥</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:</b>
‚Ä¢ üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data.get('total_users', 'N/A')}
‚Ä¢ üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {data.get('total_orders', 'N/A')}
‚Ä¢ üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${data.get('total_revenue', 0):,.2f}
‚Ä¢ üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {data.get('active_users', 'N/A')}
‚Ä¢ üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {data.get('conversion_rate', 0) * 100:.1f}%
‚Ä¢ üí≥ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${data.get('avg_order_value', 0):.2f}
        """
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="analytics_dashboard")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"Error fetching dashboard data: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_main")]
            ])
        )


async def show_segmentation(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    text = """
üë• <b>–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>

–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:

<b>–ê–ª–≥–æ—Ä–∏—Ç–º—ã:</b>
‚Ä¢ K-Means - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
‚Ä¢ DBSCAN - –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏

<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤:</b> 3-10 (–¥–ª—è K-Means)
    """
    
    keyboard = [
        [
            InlineKeyboardButton("üîµ K-Means (5 –∫–ª–∞—Å—Ç–µ—Ä–æ–≤)", callback_data="analytics_segmentation_kmeans_5"),
            InlineKeyboardButton("üîµ K-Means (3 –∫–ª–∞—Å—Ç–µ—Ä–∞)", callback_data="analytics_segmentation_kmeans_3")
        ],
        [
            InlineKeyboardButton("üü¢ DBSCAN", callback_data="analytics_segmentation_dbscan")
        ],
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_main")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def show_churn_prediction(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞"""
    text = """
‚ö†Ô∏è <b>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤</b>

–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞ –ø–æ—Ç–µ—Ä–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.

<b>–§—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–¥–µ—Ä–∂–∞–Ω–∏—é –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏
    """
    
    keyboard = [
        [
            InlineKeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤", callback_data="analytics_churn_analyze"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="analytics_churn_stats")
        ],
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_main")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text,
        parse_mode='HTML',
        reply_markup=reply_markup
    )


async def show_anomaly_detection(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é –∞–Ω–æ–º–∞–ª–∏–π"""
    text = """
üîç <b>–î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π</b>

–ü–æ–∏—Å–∫ –Ω–µ–æ–±—ã—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥–∞–Ω–Ω—ã—Ö.

<b>–¢–∏–ø—ã –∞–Ω–æ–º–∞–ª–∏–π:</b>
‚Ä¢ –ù–µ–æ–±—ã—á–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
‚Ä¢ –ê–Ω–æ–º–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
‚Ä¢ –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    """
    
    keyboard = [
        [
            InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –∞–Ω–æ–º–∞–ª–∏–∏", callback_data="analytics_anomalies_detect"),
            InlineKeyboardButton("üìä –û—Ç—á–µ—Ç", callback_data="analytics_anomalies_report")
        ],
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_main")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text,
        parse_mode='HTML',
        reply_markup=reply_markup
    )
