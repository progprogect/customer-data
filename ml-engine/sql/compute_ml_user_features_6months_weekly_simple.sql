-- =========================
-- ML User Features 6 Months Weekly Computation (Simple)
-- =========================
-- –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–Ω–∞–ø—à–æ—Ç–æ–≤ RFM-–ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∑–∞ 6 –º–µ—Å—è—Ü–µ–≤

-- ========= –ì–ï–ù–ï–†–ê–¶–ò–Ø –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–• –°–ù–ê–ü–®–û–¢–û–í =========
WITH weekly_dates AS (
  SELECT 
    generate_series(
      date_trunc('week', CURRENT_DATE - '6 months'::interval), 
      date_trunc('week', CURRENT_DATE), 
      '1 week'::interval
    )::date AS snapshot_date
),

-- ========= –ü–û–î–ì–û–¢–û–í–ö–ê –ê–ì–†–ï–ì–ê–¢–û–í =========
-- –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
last_order AS (
  SELECT 
    o.user_id, 
    MAX(o.created_at)::date AS last_dt
  FROM orders o
  WHERE o.status IN ('paid', 'shipped', 'completed')
  GROUP BY o.user_id
),

-- Frequency: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ 90 –¥–Ω–µ–π
freq_90 AS (
  SELECT 
    o.user_id, 
    wd.snapshot_date,
    COUNT(*) AS cnt
  FROM orders o 
  CROSS JOIN weekly_dates wd
  WHERE o.status IN ('paid', 'shipped', 'completed')
    AND o.created_at >= (wd.snapshot_date - '90 days'::interval)
    AND o.created_at < (wd.snapshot_date + '1 day'::interval)
  GROUP BY o.user_id, wd.snapshot_date
),

-- Monetary: —Å—É–º–º–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ 180 –¥–Ω–µ–π
mon_180 AS (
  SELECT 
    o.user_id,
    wd.snapshot_date,
    SUM(o.total_amount)::numeric(12,2) AS sum_amt,
    COUNT(*) AS cnt
  FROM orders o
  CROSS JOIN weekly_dates wd
  WHERE o.status IN ('paid', 'shipped', 'completed')
    AND o.created_at >= (wd.snapshot_date - '180 days'::interval)
    AND o.created_at < (wd.snapshot_date + '1 day'::interval)
  GROUP BY o.user_id, wd.snapshot_date
),

-- Lifetime –º–µ—Ç—Ä–∏–∫–∏
lifetime AS (
  SELECT 
    o.user_id,
    wd.snapshot_date,
    COUNT(*) AS orders_lifetime,
    SUM(o.total_amount)::numeric(12,2) AS revenue_lifetime
  FROM orders o
  CROSS JOIN weekly_dates wd
  WHERE o.status IN ('paid', 'shipped', 'completed')
    AND o.created_at < (wd.snapshot_date + '1 day'::interval)
  GROUP BY o.user_id, wd.snapshot_date
),

-- –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞ 180 –¥–Ω–µ–π
categories_180 AS (
  SELECT 
    o.user_id,
    wd.snapshot_date,
    COUNT(DISTINCT prod.category) AS categories_unique
  FROM orders o
  JOIN order_items oi ON oi.order_id = o.order_id
  JOIN products prod ON prod.product_id = oi.product_id
  CROSS JOIN weekly_dates wd
  WHERE o.status IN ('paid', 'shipped', 'completed')
    AND o.created_at >= (wd.snapshot_date - '180 days'::interval)
    AND o.created_at < (wd.snapshot_date + '1 day'::interval)
  GROUP BY o.user_id, wd.snapshot_date
),

-- ========= –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô =========
all_users AS (
  SELECT DISTINCT user_id 
  FROM users 
  WHERE user_id IS NOT NULL
),

-- ========= –§–ò–ù–ê–õ–¨–ù–ê–Ø –ê–ì–†–ï–ì–ê–¶–ò–Ø =========
final_features AS (
  SELECT 
    u.user_id,
    wd.snapshot_date,
    -- Recency: –¥–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏
    CASE 
      WHEN lo.last_dt IS NULL THEN NULL
      ELSE (wd.snapshot_date - lo.last_dt)::int
    END AS recency_days,
    -- Frequency: –∑–∞–∫–∞–∑—ã –∑–∞ 90 –¥–Ω–µ–π
    COALESCE(f90.cnt, 0) AS frequency_90d,
    -- Monetary: —Å—É–º–º–∞ –∑–∞ 180 –¥–Ω–µ–π
    COALESCE(m180.sum_amt, 0) AS monetary_180d,
    -- AOV: —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ –∑–∞ 180 –¥–Ω–µ–π
    CASE 
      WHEN m180.cnt > 0 THEN m180.sum_amt / m180.cnt 
      ELSE NULL 
    END AS aov_180d,
    -- Lifetime –º–µ—Ç—Ä–∏–∫–∏
    COALESCE(lt.orders_lifetime, 0) AS orders_lifetime,
    COALESCE(lt.revenue_lifetime, 0) AS revenue_lifetime,
    -- –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    COALESCE(c180.categories_unique, 0) AS categories_unique
  FROM all_users u
  CROSS JOIN weekly_dates wd
  LEFT JOIN last_order lo ON lo.user_id = u.user_id
  LEFT JOIN freq_90 f90 ON f90.user_id = u.user_id AND f90.snapshot_date = wd.snapshot_date
  LEFT JOIN mon_180 m180 ON m180.user_id = u.user_id AND m180.snapshot_date = wd.snapshot_date
  LEFT JOIN lifetime lt ON lt.user_id = u.user_id AND lt.snapshot_date = wd.snapshot_date
  LEFT JOIN categories_180 c180 ON c180.user_id = u.user_id AND c180.snapshot_date = wd.snapshot_date
)

-- ========= –í–°–¢–ê–í–ö–ê –í ml_user_features_daily_all =========
INSERT INTO ml_user_features_daily_all (
  user_id,
  snapshot_date,
  recency_days,
  frequency_90d,
  monetary_180d,
  aov_180d,
  orders_lifetime,
  revenue_lifetime,
  categories_unique
)
SELECT 
  user_id,
  snapshot_date,
  recency_days,
  frequency_90d,
  monetary_180d,
  aov_180d,
  orders_lifetime,
  revenue_lifetime,
  categories_unique
FROM final_features
ON CONFLICT (user_id, snapshot_date) 
DO UPDATE SET 
  recency_days = EXCLUDED.recency_days,
  frequency_90d = EXCLUDED.frequency_90d,
  monetary_180d = EXCLUDED.monetary_180d,
  aov_180d = EXCLUDED.aov_180d,
  orders_lifetime = EXCLUDED.orders_lifetime,
  revenue_lifetime = EXCLUDED.revenue_lifetime,
  categories_unique = EXCLUDED.categories_unique;

-- ========= –í–°–¢–ê–í–ö–ê –í ml_user_features_daily_buyers =========
INSERT INTO ml_user_features_daily_buyers (
  user_id,
  snapshot_date,
  recency_days,
  frequency_90d,
  monetary_180d,
  aov_180d,
  orders_lifetime,
  revenue_lifetime,
  categories_unique
)
SELECT 
  user_id,
  snapshot_date,
  recency_days,
  frequency_90d,
  monetary_180d,
  aov_180d,
  orders_lifetime,
  revenue_lifetime,
  categories_unique
FROM final_features
WHERE orders_lifetime > 0  -- —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–∫—É–ø–∫–∞–º–∏
ON CONFLICT (user_id, snapshot_date) 
DO UPDATE SET 
  recency_days = EXCLUDED.recency_days,
  frequency_90d = EXCLUDED.frequency_90d,
  monetary_180d = EXCLUDED.monetary_180d,
  aov_180d = EXCLUDED.aov_180d,
  orders_lifetime = EXCLUDED.orders_lifetime,
  revenue_lifetime = EXCLUDED.revenue_lifetime,
  categories_unique = EXCLUDED.categories_unique;

-- ========= –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò =========
DO $$
DECLARE
    total_rows_all INTEGER;
    total_rows_buyers INTEGER;
    weekly_snapshots_count INTEGER;
    unique_users INTEGER;
    min_snapshot DATE;
    max_snapshot DATE;
    log_message TEXT;
BEGIN
    -- –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    SELECT COUNT(*) INTO total_rows_all FROM ml_user_features_daily_all;
    SELECT COUNT(*) INTO total_rows_buyers FROM ml_user_features_daily_buyers;
    
    SELECT COUNT(DISTINCT snapshot_date) INTO weekly_snapshots_count 
    FROM ml_user_features_daily_all;
    
    SELECT COUNT(DISTINCT user_id) INTO unique_users 
    FROM ml_user_features_daily_all;
    
    SELECT MIN(snapshot_date), MAX(snapshot_date) 
    INTO min_snapshot, max_snapshot 
    FROM ml_user_features_daily_all;
    
    -- –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–µ
    log_message := format(
        E'[ML FEATURES GENERATED - 6 MONTHS WEEKLY]\n' ||
        'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∏–Ω—ã —Ñ–∏—á:\n' ||
        '  ‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ (–≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏): %s\n' ||
        '  ‚Ä¢ –°—Ç—Ä–æ–∫ —Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏: %s\n' ||
        '  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %s\n' ||
        '  ‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–Ω–∞–ø—à–æ—Ç–æ–≤: %s\n' ||
        'üìÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:\n' ||
        '  ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π snapshot_date: %s\n' ||
        '  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π snapshot_date: %s\n' ||
        '‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏—Ç—Ä–∏–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!',
        total_rows_all,
        total_rows_buyers,
        unique_users,
        weekly_snapshots_count,
        min_snapshot,
        max_snapshot
    );
    
    -- –í—ã–≤–æ–¥–∏–º –≤ –ª–æ–≥
    RAISE NOTICE '%', log_message;
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è
    IF total_rows_all = 0 THEN
        RAISE EXCEPTION '–ù–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ ml_user_features_daily_all!';
    END IF;
    
    IF weekly_snapshots_count < 20 THEN
        RAISE WARNING '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –º–∞–ª–æ —Å–Ω–∞–ø—à–æ—Ç–æ–≤ (%): –æ–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º 20 –¥–ª—è 6 –º–µ—Å—è—Ü–µ–≤', weekly_snapshots_count;
    END IF;
    
END $$;
