-- =========================
-- Validate Time Split Quality
-- =========================
-- –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ–∑–∞

DO $$
DECLARE
    -- –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    train_rows INTEGER;
    valid_rows INTEGER;
    test_rows INTEGER;
    total_rows INTEGER;
    
    -- –ë–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤
    train_pos_rate NUMERIC(5,2);
    valid_pos_rate NUMERIC(5,2);
    test_pos_rate NUMERIC(5,2);
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
    overlaps_count INTEGER;
    
    -- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏—á–∞–º
    train_avg_recency NUMERIC(8,2);
    valid_avg_recency NUMERIC(8,2);
    test_avg_recency NUMERIC(8,2);
    
    train_avg_frequency NUMERIC(8,2);
    valid_avg_frequency NUMERIC(8,2);
    test_avg_frequency NUMERIC(8,2);
    
    train_avg_monetary NUMERIC(12,2);
    valid_avg_monetary NUMERIC(12,2);
    test_avg_monetary NUMERIC(12,2);
    
    -- –ì—Ä–∞–Ω–∏—Ü—ã –¥–∞—Ç
    train_min_date DATE;
    train_max_date DATE;
    valid_min_date DATE;
    valid_max_date DATE;
    test_min_date DATE;
    test_max_date DATE;
    
    log_message TEXT;
    validation_passed BOOLEAN := TRUE;
BEGIN
    -- === –û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
    SELECT COUNT(*) INTO train_rows FROM ml_training_dataset WHERE split = 'train';
    SELECT COUNT(*) INTO valid_rows FROM ml_training_dataset WHERE split = 'valid';
    SELECT COUNT(*) INTO test_rows FROM ml_training_dataset WHERE split = 'test';
    total_rows := train_rows + valid_rows + test_rows;
    
    -- === –ë–ê–õ–ê–ù–° –ö–õ–ê–°–°–û–í ===
    SELECT 
        ROUND(COUNT(CASE WHEN purchase_next_30d = TRUE THEN 1 END)::NUMERIC / COUNT(*) * 100, 2)
    INTO train_pos_rate 
    FROM ml_training_dataset WHERE split = 'train';
    
    SELECT 
        ROUND(COUNT(CASE WHEN purchase_next_30d = TRUE THEN 1 END)::NUMERIC / COUNT(*) * 100, 2)
    INTO valid_pos_rate 
    FROM ml_training_dataset WHERE split = 'valid';
    
    SELECT 
        ROUND(COUNT(CASE WHEN purchase_next_30d = TRUE THEN 1 END)::NUMERIC / COUNT(*) * 100, 2)
    INTO test_pos_rate 
    FROM ml_training_dataset WHERE split = 'test';
    
    -- === –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ô ===
    SELECT COUNT(*) INTO overlaps_count
    FROM (
        SELECT user_id, snapshot_date, COUNT(DISTINCT split) as split_count
        FROM ml_training_dataset 
        GROUP BY user_id, snapshot_date
        HAVING COUNT(DISTINCT split) > 1
    ) t;
    
    -- === –ì–†–ê–ù–ò–¶–´ –î–ê–¢ ===
    SELECT MIN(snapshot_date), MAX(snapshot_date) INTO train_min_date, train_max_date 
    FROM ml_training_dataset WHERE split = 'train';
    
    SELECT MIN(snapshot_date), MAX(snapshot_date) INTO valid_min_date, valid_max_date 
    FROM ml_training_dataset WHERE split = 'valid';
    
    SELECT MIN(snapshot_date), MAX(snapshot_date) INTO test_min_date, test_max_date 
    FROM ml_training_dataset WHERE split = 'test';
    
    -- === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –§–ò–ß–ê–ú ===
    SELECT AVG(recency_days), AVG(frequency_90d), AVG(monetary_180d) 
    INTO train_avg_recency, train_avg_frequency, train_avg_monetary
    FROM ml_training_dataset WHERE split = 'train';
    
    SELECT AVG(recency_days), AVG(frequency_90d), AVG(monetary_180d) 
    INTO valid_avg_recency, valid_avg_frequency, valid_avg_monetary
    FROM ml_training_dataset WHERE split = 'valid';
    
    SELECT AVG(recency_days), AVG(frequency_90d), AVG(monetary_180d) 
    INTO test_avg_recency, test_avg_frequency, test_avg_monetary
    FROM ml_training_dataset WHERE split = 'test';
    
    -- === –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –û–¢–ß–ï–¢–ê ===
    log_message := 
        E'[TIME SPLIT VALIDATION REPORT]\n' ||
        E'===============================\n' ||
        E'üìä –†–ê–ó–ú–ï–†–´ –°–ü–õ–ò–¢–û–í:\n' ||
        '  ‚Ä¢ Train: ' || train_rows || ' —Å—Ç—Ä–æ–∫ (' || ROUND(train_rows::NUMERIC / total_rows * 100, 1) || '%)' || E'\n' ||
        '  ‚Ä¢ Valid: ' || valid_rows || ' —Å—Ç—Ä–æ–∫ (' || ROUND(valid_rows::NUMERIC / total_rows * 100, 1) || '%)' || E'\n' ||
        '  ‚Ä¢ Test:  ' || test_rows || ' —Å—Ç—Ä–æ–∫ (' || ROUND(test_rows::NUMERIC / total_rows * 100, 1) || '%)' || E'\n' ||
        '  ‚Ä¢ –í—Å–µ–≥–æ: ' || total_rows || ' —Å—Ç—Ä–æ–∫' || E'\n' ||
        E'\nüéØ –ë–ê–õ–ê–ù–° –ö–õ–ê–°–°–û–í:\n' ||
        '  ‚Ä¢ Train positive rate: ' || train_pos_rate || '%' || E'\n' ||
        '  ‚Ä¢ Valid positive rate: ' || valid_pos_rate || '%' || E'\n' ||
        '  ‚Ä¢ Test positive rate:  ' || test_pos_rate || '%' || E'\n' ||
        E'\nüìÖ –ì–†–ê–ù–ò–¶–´ –î–ê–¢:\n' ||
        '  ‚Ä¢ Train: ' || train_min_date || ' ‚Äî ' || train_max_date || E'\n' ||
        '  ‚Ä¢ Valid: ' || valid_min_date || ' ‚Äî ' || valid_max_date || E'\n' ||
        '  ‚Ä¢ Test:  ' || test_min_date || ' ‚Äî ' || test_max_date || E'\n' ||
        E'\nüìà –°–†–ï–î–ù–ò–ï –ó–ù–ê–ß–ï–ù–ò–Ø –§–ò–ß–ï–ô:\n' ||
        '  ‚Ä¢ Recency  - Train: ' || ROUND(train_avg_recency, 1) || ', Valid: ' || ROUND(valid_avg_recency, 1) || ', Test: ' || ROUND(test_avg_recency, 1) || E'\n' ||
        '  ‚Ä¢ Frequency - Train: ' || ROUND(train_avg_frequency, 1) || ', Valid: ' || ROUND(valid_avg_frequency, 1) || ', Test: ' || ROUND(test_avg_frequency, 1) || E'\n' ||
        '  ‚Ä¢ Monetary - Train: $' || ROUND(train_avg_monetary, 0) || ', Valid: $' || ROUND(valid_avg_monetary, 0) || ', Test: $' || ROUND(test_avg_monetary, 0) || E'\n';
    
    -- === –í–ê–õ–ò–î–ê–¶–ò–û–ù–ù–´–ï –ü–†–û–í–ï–†–ö–ò ===
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
    IF overlaps_count > 0 THEN
        log_message := log_message || E'\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω–æ ' || overlaps_count || ' –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –º–µ–∂–¥—É —Å–ø–ª–∏—Ç–∞–º–∏!';
        validation_passed := FALSE;
    ELSE
        log_message := log_message || E'\n‚úÖ –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å–ø–ª–∏—Ç–∞–º–∏: –ù–ï –ù–ê–ô–î–ï–ù–´';
    END IF;
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    IF train_max_date >= valid_min_date OR valid_max_date >= test_min_date THEN
        log_message := log_message || E'\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–∞—Ä—É—à–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å!';
        validation_passed := FALSE;
    ELSE
        log_message := log_message || E'\n‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ö–û–†–†–ï–ö–¢–ù–ê';
    END IF;
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ë–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤ (¬±5 –ø.–ø. –æ—Ç train)
    IF ABS(valid_pos_rate - train_pos_rate) > 5 THEN
        log_message := log_message || E'\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: Valid –±–∞–ª–∞–Ω—Å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç Train –Ω–∞ ' || ROUND(ABS(valid_pos_rate - train_pos_rate), 1) || ' –ø.–ø.';
    END IF;
    
    IF ABS(test_pos_rate - train_pos_rate) > 5 THEN
        log_message := log_message || E'\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: Test –±–∞–ª–∞–Ω—Å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç Train –Ω–∞ ' || ROUND(ABS(test_pos_rate - train_pos_rate), 1) || ' –ø.–ø.';
    END IF;
    
    IF ABS(valid_pos_rate - train_pos_rate) <= 5 AND ABS(test_pos_rate - train_pos_rate) <= 5 THEN
        log_message := log_message || E'\n‚úÖ –ë–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤: –í –ü–†–ï–î–ï–õ–ê–• –ù–û–†–ú–´ (¬±5 –ø.–ø.)';
    END IF;
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –†–∞–∑–º–µ—Ä—ã —Å–ø–ª–∏—Ç–æ–≤
    IF valid_rows < 5000 OR test_rows < 5000 THEN
        log_message := log_message || E'\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ú–∞–ª–µ–Ω—å–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã valid/test (<5K —Å—Ç—Ä–æ–∫)';
    ELSE
        log_message := log_message || E'\n‚úÖ –†–∞–∑–º–µ—Ä—ã —Å–ø–ª–∏—Ç–æ–≤: –î–û–°–¢–ê–¢–û–ß–ù–´–ï';
    END IF;
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –æ—Ç–ª–∏—á–∏—è –≤ —Ñ–∏—á–∞—Ö (>50% –æ—Ç–ª–∏—á–∏–µ)
    IF ABS(valid_avg_frequency - train_avg_frequency) / train_avg_frequency > 0.5 OR
       ABS(test_avg_frequency - train_avg_frequency) / train_avg_frequency > 0.5 THEN
        log_message := log_message || E'\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –æ—Ç–ª–∏—á–∏—è –≤ frequency –º–µ–∂–¥—É —Å–ø–ª–∏—Ç–∞–º–∏';
    END IF;
    
    IF ABS(valid_avg_monetary - train_avg_monetary) / NULLIF(train_avg_monetary, 0) > 0.5 OR
       ABS(test_avg_monetary - train_avg_monetary) / NULLIF(train_avg_monetary, 0) > 0.5 THEN
        log_message := log_message || E'\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –æ—Ç–ª–∏—á–∏—è –≤ monetary –º–µ–∂–¥—É —Å–ø–ª–∏—Ç–∞–º–∏';
    END IF;
    
    -- === –§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢ ===
    IF validation_passed THEN
        log_message := log_message || E'\n\nüéâ –ò–¢–û–ì: –í–†–ï–ú–ï–ù–ù–û–ô –†–ê–ó–†–ï–ó –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ô! –ì–û–¢–û–í –î–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø!';
    ELSE
        log_message := log_message || E'\n\nüö® –ò–¢–û–ì: –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´! –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï!';
    END IF;
    
    -- –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
    RAISE NOTICE '%', log_message;
    
    -- –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ - –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    IF NOT validation_passed THEN
        RAISE EXCEPTION '–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ–∑–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞! –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏.';
    END IF;
    
END $$;
