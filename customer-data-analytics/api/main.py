"""
FastAPI Main Application
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª API —Å–µ—Ä–≤–µ—Ä–∞
"""

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import uvicorn

from routes import analytics, recommendations, users, products, segments, ml_predictions, real_users, simple_real_users, direct_db
from middleware.logging import setup_logging
from services.ml_service import ml_service
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'shared'))
from database.connection import SessionLocal


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    setup_logging()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ ML –º–æ–¥–µ–ª–∏
    print("ü§ñ –ó–∞–≥—Ä—É–∑–∫–∞ ML –º–æ–¥–µ–ª–∏...")
    model_loaded = ml_service.load_model()
    if model_loaded:
        print(f"‚úÖ ML –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {ml_service.model_version}")
    else:
        print("‚ö†Ô∏è ML –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ - ML endpoints –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    yield
    
    # Shutdown
    print("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã API...")
    pass


app = FastAPI(
    title="Customer Data Analytics API",
    description="API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π",
    version="1.0.0",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],  # React frontend
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include routers
app.include_router(analytics.router, prefix="/api/v1/analytics", tags=["analytics"])
app.include_router(recommendations.router, prefix="/api/v1/recommendations", tags=["recommendations"])
app.include_router(users.router, prefix="/api/v1/users", tags=["users"])
app.include_router(products.router, prefix="/api/v1/products", tags=["products"])
app.include_router(segments.router, tags=["segments"])
app.include_router(ml_predictions.router, prefix="/api/v1/ml", tags=["machine-learning"])
app.include_router(real_users.router, prefix="/api/v1", tags=["real-data"])
app.include_router(simple_real_users.router, prefix="/api/v1", tags=["simple-real-data"])
app.include_router(direct_db.router, prefix="/api/v1", tags=["direct-db"])


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {"message": "Customer Data Analytics API", "version": "1.0.0"}


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return {"status": "healthy"}


if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
