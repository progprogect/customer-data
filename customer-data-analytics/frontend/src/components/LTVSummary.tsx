/**
 * LTVSummary Component
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ LTV
 */

import React from 'react';

interface LTVSummaryData {
  metric_name: string;
  value_3m: number;
  value_6m: number;
  value_12m: number;
  value_lifetime: number;
}

interface LTVSummaryResponse {
  summary: LTVSummaryData[];
  total_users: number;
  calculated_at: string;
}

interface LTVSummaryProps {
  data: LTVSummaryResponse;
}

const LTVSummary: React.FC<LTVSummaryProps> = ({ data }) => {
  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2
    }).format(value);
  };

  const formatNumber = (value: number) => {
    return new Intl.NumberFormat('ru-RU').format(value);
  };

  const getMetricIcon = (metricName: string) => {
    switch (metricName) {
      case 'Average LTV':
        return 'üìä';
      case 'Median LTV':
        return 'üìà';
      case '95th Percentile LTV':
        return 'üéØ';
      case 'Users with Orders':
        return 'üë•';
      default:
        return 'üìã';
    }
  };

  const getMetricDescription = (metricName: string) => {
    switch (metricName) {
      case 'Average LTV':
        return '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞';
      case 'Median LTV':
        return '–ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ (—É–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–µ–∫–æ—Å –æ—Ç VIP)';
      case '95th Percentile LTV':
        return '95-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å (—Ç–æ–ø 5% –∫–ª–∏–µ–Ω—Ç–æ–≤)';
      case 'Users with Orders':
        return '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏';
      default:
        return '';
    }
  };

  return (
    <div>
      <div className="section-header">
        <h2>üìä –°–≤–æ–¥–∫–∞ LTV</h2>
        <div className="section-meta">
          <span>üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <strong>{formatNumber(data.total_users)}</strong></span>
          <span>üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {new Date(data.calculated_at).toLocaleString('ru-RU')}</span>
        </div>
      </div>

      <div className="cards-grid">
        {data.summary.map((metric, index) => (
          <div key={index} className="card">
            <div className="card-header">
              <span className="card-icon">{getMetricIcon(metric.metric_name)}</span>
              <h3>{metric.metric_name}</h3>
            </div>
            <p className="card-description">{getMetricDescription(metric.metric_name)}</p>
            
            <div className="metric-list">
              <div className="metric-item">
                <span>3 –º–µ—Å—è—Ü–∞:</span>
                <span className="metric-value">
                  {metric.metric_name === 'Users with Orders' 
                    ? formatNumber(metric.value_3m)
                    : formatCurrency(metric.value_3m)
                  }
                </span>
              </div>
              <div className="metric-item">
                <span>6 –º–µ—Å—è—Ü–µ–≤:</span>
                <span className="metric-value">
                  {metric.metric_name === 'Users with Orders' 
                    ? formatNumber(metric.value_6m)
                    : formatCurrency(metric.value_6m)
                  }
                </span>
              </div>
              <div className="metric-item">
                <span>12 –º–µ—Å—è—Ü–µ–≤:</span>
                <span className="metric-value">
                  {metric.metric_name === 'Users with Orders' 
                    ? formatNumber(metric.value_12m)
                    : formatCurrency(metric.value_12m)
                  }
                </span>
              </div>
              <div className="metric-item highlight">
                <span>–ó–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥:</span>
                <span className="metric-value">
                  {metric.metric_name === 'Users with Orders' 
                    ? formatNumber(metric.value_lifetime)
                    : formatCurrency(metric.value_lifetime)
                  }
                </span>
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="insights-section">
        <h3>üí° –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã</h3>
        <div className="cards-grid">
          <div className="card">
            <h4>üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π CAC</h4>
            <p>
              –ù–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–µ–¥–Ω–µ–≥–æ LTV –∑–∞ 6 –º–µ—Å—è—Ü–µ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π CAC (Customer Acquisition Cost) 
              –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å <strong>
                {formatCurrency(data.summary.find(m => m.metric_name === 'Average LTV')?.value_6m || 0)}
              </strong>
            </p>
          </div>
          <div className="card">
            <h4>üìà –†–æ—Å—Ç —Ü–µ–Ω–Ω–æ—Å—Ç–∏</h4>
            <p>
              –ö–ª–∏–µ–Ω—Ç—ã –ø—Ä–∏–Ω–æ—Å—è—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º <strong>
                {formatCurrency(data.summary.find(m => m.metric_name === 'Average LTV')?.value_12m || 0)}
              </strong> –∑–∞ –≥–æ–¥, —á—Ç–æ –≤ <strong>
                {((data.summary.find(m => m.metric_name === 'Average LTV')?.value_12m || 0) / 
                  (data.summary.find(m => m.metric_name === 'Average LTV')?.value_6m || 1)).toFixed(1)}x
              </strong> –±–æ–ª—å—à–µ —á–µ–º –∑–∞ –ø–æ–ª–≥–æ–¥–∞
            </p>
          </div>
          <div className="card">
            <h4>üë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤</h4>
            <p>
              <strong>
                {((data.summary.find(m => m.metric_name === 'Users with Orders')?.value_lifetime || 0) / 
                  data.total_users * 100).toFixed(1)}%
              </strong> –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ–≤–µ—Ä—à–∏–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∫—É–ø–∫—É
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LTVSummary;
