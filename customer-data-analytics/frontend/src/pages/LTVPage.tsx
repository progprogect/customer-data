/**
 * LTVPage Component
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º LTV (Lifetime Value) –∫–ª–∏–µ–Ω—Ç–æ–≤
 */

import React, { useEffect, useState } from 'react';
import LTVSummary from '../components/LTVSummary';
// import './LTVPage.css'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏

interface LTVSummaryData {
  metric_name: string;
  value_3m: number;
  value_6m: number;
  value_12m: number;
  value_lifetime: number;
}

interface LTVSummaryResponse {
  summary: LTVSummaryData[];
  total_users: number;
  calculated_at: string;
}

const LTVPage: React.FC = () => {
  const [summaryData, setSummaryData] = useState<LTVSummaryResponse | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const fetchSummaryData = async () => {
    try {
      const response = await fetch('http://localhost:8000/api/v1/ltv/summary');
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ LTV —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      const data = await response.json();
      setSummaryData(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
  };


  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    fetchSummaryData();
  }, []);

  const handleRecalculate = async () => {
    try {
      setLoading(true);
      const response = await fetch('http://localhost:8000/api/v1/ltv/calculate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({})
      });
      
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ LTV');
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å—á–µ—Ç–∞
      await fetchSummaryData();
      
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ LTV');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="page">
      <div className="page-header">
        <h1>üí∞ LTV (Lifetime Value) –ê–Ω–∞–ª–∏–∑</h1>
        <p className="page-description">
          –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–º 3, 6, 12 –º–µ—Å—è—Ü–µ–≤ –∏ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥
        </p>
        <div className="page-actions">
          <button 
            className="btn btn-primary"
            onClick={handleRecalculate}
            disabled={loading}
          >
            {loading ? '–ü–µ—Ä–µ—Å—á–µ—Ç...' : 'üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å LTV'}
          </button>
        </div>
      </div>

      {error && (
        <div className="alert alert-error">
          <p>‚ùå {error}</p>
          <button className="btn btn-sm" onClick={() => setError(null)}>–ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
      )}

      {summaryData ? (
        <LTVSummary data={summaryData} />
      ) : (
        <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–æ–¥–∫–∏ LTV...</div>
      )}
    </div>
  );
};

export default LTVPage;
