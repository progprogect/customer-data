-- =========================
-- Validate Training Dataset Quality
-- =========================
-- –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—É—á–∞—é—â–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞

DO $$
DECLARE
    -- –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_rows INTEGER;
    unique_users INTEGER;
    unique_snapshots INTEGER;
    
    -- –ë–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤
    positive_class INTEGER;
    negative_class INTEGER;
    positive_percent NUMERIC(5,2);
    
    -- –ê–Ω–∞–ª–∏–∑ NULL –∑–Ω–∞—á–µ–Ω–∏–π
    null_recency INTEGER;
    null_aov INTEGER;
    total_nulls INTEGER;
    
    -- –í—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
    min_snapshot DATE;
    max_snapshot DATE;
    
    -- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º
    avg_recency NUMERIC(8,2);
    avg_frequency NUMERIC(8,2);
    avg_monetary NUMERIC(12,2);
    avg_orders_lifetime NUMERIC(8,2);
    
    log_message TEXT;
    validation_passed BOOLEAN := TRUE;
BEGIN
    -- === –û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
    SELECT COUNT(*) INTO total_rows FROM ml_training_dataset;
    
    SELECT COUNT(DISTINCT user_id) INTO unique_users FROM ml_training_dataset;
    
    SELECT COUNT(DISTINCT snapshot_date) INTO unique_snapshots FROM ml_training_dataset;
    
    -- === –ë–ê–õ–ê–ù–° –ö–õ–ê–°–°–û–í ===
    SELECT COUNT(*) INTO positive_class 
    FROM ml_training_dataset 
    WHERE purchase_next_30d = TRUE;
    
    SELECT COUNT(*) INTO negative_class 
    FROM ml_training_dataset 
    WHERE purchase_next_30d = FALSE;
    
    positive_percent := (positive_class::NUMERIC / NULLIF(total_rows, 0)) * 100;
    
    -- === –ê–ù–ê–õ–ò–ó NULL –ó–ù–ê–ß–ï–ù–ò–ô ===
    SELECT COUNT(*) INTO null_recency 
    FROM ml_training_dataset 
    WHERE recency_days IS NULL;
    
    SELECT COUNT(*) INTO null_aov 
    FROM ml_training_dataset 
    WHERE aov_180d IS NULL;
    
    total_nulls := null_recency + null_aov;
    
    -- === –í–†–ï–ú–ï–ù–ù–´–ï –ì–†–ê–ù–ò–¶–´ ===
    SELECT MIN(snapshot_date), MAX(snapshot_date) 
    INTO min_snapshot, max_snapshot 
    FROM ml_training_dataset;
    
    -- === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ü–†–ò–ó–ù–ê–ö–ê–ú ===
    SELECT 
        AVG(recency_days),
        AVG(frequency_90d),
        AVG(monetary_180d),
        AVG(orders_lifetime)
    INTO avg_recency, avg_frequency, avg_monetary, avg_orders_lifetime
    FROM ml_training_dataset;
    
    -- === –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –û–¢–ß–ï–¢–ê ===
    log_message := 
        E'[TRAINING DATASET VALIDATION REPORT]\n' ||
        E'=====================================\n' ||
        E'üìä –û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n' ||
        '  ‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ' || total_rows || E'\n' ||
        '  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' || unique_users || E'\n' ||
        '  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–Ω–∞–ø—à–æ—Ç–æ–≤: ' || unique_snapshots || E'\n' ||
        '  ‚Ä¢ –ü–µ—Ä–∏–æ–¥: ' || min_snapshot || ' ‚Äî ' || max_snapshot || E'\n' ||
        E'\nüéØ –ë–ê–õ–ê–ù–° –ö–õ–ê–°–°–û–í:\n' ||
        '  ‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å (–ø–æ–∫—É–ø–∫–∏): ' || positive_class || E'\n' ||
        '  ‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å (–Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫): ' || negative_class || E'\n' ||
        '  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞: ' || positive_percent || '%' || E'\n' ||
        E'\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ü–£–°–ö–û–í:\n' ||
        '  ‚Ä¢ NULL –≤ recency_days: ' || null_recency || E'\n' ||
        '  ‚Ä¢ NULL –≤ aov_180d: ' || null_aov || E'\n' ||
        '  ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NULL: ' || total_nulls || E'\n' ||
        E'\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–ò–ó–ù–ê–ö–û–í:\n' ||
        '  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π recency_days: ' || COALESCE(ROUND(avg_recency, 2), 0) || E'\n' ||
        '  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π frequency_90d: ' || ROUND(avg_frequency, 2) || E'\n' ||
        '  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π monetary_180d: $' || ROUND(avg_monetary, 2) || E'\n' ||
        '  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π orders_lifetime: ' || ROUND(avg_orders_lifetime, 2) || E'\n';
    
    -- === –í–ê–õ–ò–î–ê–¶–ò–û–ù–ù–´–ï –ü–†–û–í–ï–†–ö–ò ===
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞
    IF total_rows = 0 THEN
        log_message := log_message || E'\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –î–∞—Ç–∞—Å–µ—Ç –ø—É—Å—Ç!';
        validation_passed := FALSE;
    ELSIF total_rows < 10000 THEN
        log_message := log_message || E'\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (' || total_rows || ' < 10K)';
    ELSE
        log_message := log_message || E'\n‚úÖ –†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞: OK (' || total_rows || ' —Å—Ç—Ä–æ–∫)';
    END IF;
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ä–∞–∑–º–µ—Ä—É (69K –∏–∑ –ª–µ–π–±–ª–æ–≤)
    IF total_rows != 69000 THEN
        log_message := log_message || E'\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –†–∞–∑–º–µ—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É (69K)';
    ELSE
        log_message := log_message || E'\n‚úÖ –†–∞–∑–º–µ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É: OK';
    END IF;
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ë–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤
    IF positive_percent < 5 OR positive_percent > 50 THEN
        log_message := log_message || E'\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –î–∏—Å–±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤ (' || positive_percent || '%)';
    ELSE
        log_message := log_message || E'\n‚úÖ –ë–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤: OK (' || positive_percent || '%)';
    END IF;
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ NULL –∑–Ω–∞—á–µ–Ω–∏—è
    IF null_recency > total_rows * 0.8 THEN
        log_message := log_message || E'\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ NULL –≤ recency_days';
        validation_passed := FALSE;
    ELSE
        log_message := log_message || E'\n‚úÖ NULL –≤ recency_days: OK (' || null_recency || ')';
    END IF;
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    IF unique_users < 1000 THEN
        log_message := log_message || E'\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ú–∞–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (' || unique_users || ')';
    ELSE
        log_message := log_message || E'\n‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: OK (' || unique_users || ')';
    END IF;
    
    -- === –§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢ ===
    IF validation_passed THEN
        log_message := log_message || E'\n\nüéâ –ò–¢–û–ì: –î–ê–¢–ê–°–ï–¢ –ì–û–¢–û–í –ö –û–ë–£–ß–ï–ù–ò–Æ!';
    ELSE
        log_message := log_message || E'\n\nüí• –ò–¢–û–ì: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò! –û–ë–£–ß–ï–ù–ò–ï –ù–ï–í–û–ó–ú–û–ñ–ù–û!';
    END IF;
    
    -- –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
    RAISE NOTICE '%', log_message;
    
    -- –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ - –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    IF NOT validation_passed THEN
        RAISE EXCEPTION '–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞! –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏.';
    END IF;
    
END $$;
