import { useState, useEffect } from 'react'
import './RecommendationsPage.css'
import { 
  getHybridRecommendations, 
  getUserPurchases, 
  getTopRecommendedProducts,
  getAlgorithmMetrics,
  type RecommendationItem,
  type UserPurchase,
  type TopProduct,
  type AlgorithmMetrics
} from '../services/recommendations'

interface UserCardData {
  user_id: number
  recent_purchases: UserPurchase[]
  hybrid_recommendations: RecommendationItem[]
  loading: boolean
  error?: string
}

function RecommendationsPage() {
  const [userCards, setUserCards] = useState<UserCardData[]>([])
  const [algorithmMetrics, setAlgorithmMetrics] = useState<AlgorithmMetrics[]>([])
  const [topProducts, setTopProducts] = useState<TopProduct[]>([])
  const [loading, setLoading] = useState(true)

  // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–µ–º–æ
  const DEMO_USER_IDS = [323, 588, 665, 2106, 2311]

  const ALGORITHM_COLORS = {
    'CF': '#10b981', // green
    'Content': '#3b82f6', // blue  
    'Popularity': '#6b7280', // gray
    'Hybrid': '#8b5cf6' // purple
  }

  useEffect(() => {
    loadRecommendationsData()
  }, [])

  const loadRecommendationsData = async () => {
    setLoading(true)
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö demo –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const userPromises = DEMO_USER_IDS.map(async (userId) => {
        const userData: UserCardData = {
          user_id: userId,
          recent_purchases: [],
          hybrid_recommendations: [],
          loading: true
        }

        try {
          // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø–æ–∫—É–ø–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
          const [hybridRecs, userPurchases] = await Promise.all([
            getHybridRecommendations(userId, 5),
            getUserPurchases(userId, 3)
          ])

          userData.hybrid_recommendations = hybridRecs
          userData.recent_purchases = userPurchases
          userData.loading = false
        } catch (error) {
          console.error(`Error loading data for user ${userId}:`, error instanceof Error ? error.message : String(error))
          userData.error = `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`
          userData.loading = false
        }

        return userData
      })

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ —Ç–æ–ø —Ç–æ–≤–∞—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
      const [usersData, topProductsData] = await Promise.all([
        Promise.all(userPromises),
        getTopRecommendedProducts(8)
      ])

      setUserCards(usersData)
      setTopProducts(topProductsData)

      // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å —Ü–≤–µ—Ç–∞–º–∏
      const metrics = getAlgorithmMetrics().map(metric => ({
        ...metric,
        color: ALGORITHM_COLORS[metric.algorithm.includes('CF') ? 'CF' : 
                                 metric.algorithm.includes('Content') ? 'Content' :
                                 metric.algorithm.includes('Hybrid') ? 'Hybrid' : 'Popularity']
      }))
      setAlgorithmMetrics(metrics)

    } catch (error) {
      console.error('Error loading recommendations data:', error instanceof Error ? error.message : String(error))
    } finally {
      setLoading(false)
    }
  }

  const getRecommendationExplanation = (item: RecommendationItem): string[] => {
    const explanations: string[] = []
    
    if (item.recommendation_reason.includes('cf')) {
      explanations.push('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ –ø–æ–∫—É–ø–∞–ª–∏ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä')
    }
    if (item.recommendation_reason.includes('content')) {
      explanations.push('üîó –ü–æ—Ö–æ–∂ –Ω–∞ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–∫—É–ø–∞–ª–∏ —Ä–∞–Ω–µ–µ')
    }
    if (item.recommendation_reason.includes('pop')) {
      explanations.push('üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π')
    }
    
    if (explanations.length === 0) {
      explanations.push('‚ú® –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω –≥–∏–±—Ä–∏–¥–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º')
    }
    
    return explanations.slice(0, 2) // –ú–∞–∫—Å–∏–º—É–º 2 –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
  }

  const getSourceBadges = (item: RecommendationItem): { text: string, color: string }[] => {
    const badges: { text: string, color: string }[] = []
    
    if (item.recommendation_reason.includes('cf')) {
      badges.push({ text: 'CF', color: ALGORITHM_COLORS.CF })
    }
    if (item.recommendation_reason.includes('content')) {
      badges.push({ text: 'Content', color: ALGORITHM_COLORS.Content })
    }
    if (item.recommendation_reason.includes('pop')) {
      badges.push({ text: 'Popular', color: ALGORITHM_COLORS.Popularity })
    }
    
    if (badges.length === 0) {
      badges.push({ text: 'Hybrid', color: ALGORITHM_COLORS.Hybrid })
    }
    
    return badges
  }

  if (loading) {
    return (
      <div className="recommendations-page">
        <div className="page-header">
          <h1>üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h1>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
        </div>
        <div className="loading-skeleton">
          {[1, 2, 3].map(i => (
            <div key={i} className="skeleton-card"></div>
          ))}
        </div>
      </div>
    )
  }

  return (
    <div className="recommendations-page">
      <div className="page-header">
        <h1>üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h1>
        <p>–ü—Ä–∏–º–µ—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
      </div>

      <div className="recommendations-grid">
        {/* –°–µ–∫—Ü–∏—è 1: –ö–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
        <section className="user-cards-section">
          <h2>üìä –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h2>
          <div className="user-cards-grid">
            {userCards.map(user => (
              <div key={user.user_id} className="user-card">
                <div className="user-header">
                  <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user.user_id}</h3>
                  {user.loading && <span className="loading-badge">–ó–∞–≥—Ä—É–∑–∫–∞...</span>}
                  {user.error && <span className="error-badge">–û—à–∏–±–∫–∞</span>}
                </div>

                {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ */}
                <div className="user-purchases">
                  <h4>üõí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</h4>
                  <div className="purchases-list">
                    {user.recent_purchases.length > 0 ? 
                      user.recent_purchases.slice(0, 3).map((purchase, idx) => (
                        <div key={idx} className="purchase-item">
                          <span className="purchase-title">{purchase.title}</span>
                          <span className="purchase-price">{(purchase.price / 100).toLocaleString('ru-RU')}‚ÇΩ</span>
                        </div>
                      )) : (
                        <div className="empty-state">
                          <span>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</span>
                        </div>
                      )
                    }
                  </div>
                </div>

                {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
                <div className="user-recommendations">
                  <h4>‚ú® –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ Hybrid</h4>
                  <div className="recommendations-list">
                    {user.hybrid_recommendations.length > 0 ?
                      user.hybrid_recommendations.slice(0, 3).map((rec, idx) => (
                        <div key={idx} className="recommendation-item">
                          <div className="rec-header">
                            <div className="rec-title-container">
                              <span className="rec-title">{rec.title}</span>
                              <div className="rec-source-badges">
                                {getSourceBadges(rec).map((badge, i) => (
                                  <span 
                                    key={i} 
                                    className="source-badge"
                                    style={{ backgroundColor: badge.color }}
                                  >
                                    {badge.text}
                                  </span>
                                ))}
                              </div>
                            </div>
                            <span className="rec-score">{(rec.score * 100).toFixed(0)}%</span>
                          </div>
                          <div className="rec-explanations">
                            {getRecommendationExplanation(rec).map((explanation, i) => (
                              <span key={i} className="rec-explanation">{explanation}</span>
                            ))}
                          </div>
                        </div>
                      )) : (
                        <div className="empty-state">
                          <span>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</span>
                        </div>
                      )
                    }
                  </div>
                </div>
              </div>
            ))}
          </div>
        </section>

        {/* –°–µ–∫—Ü–∏—è 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ */}
        <section className="algorithms-section">
          <h2>üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤</h2>
          <div className="algorithms-comparison">
            <div className="metrics-table">
              <div className="table-header">
                <span>–ê–ª–≥–æ—Ä–∏—Ç–º</span>
                <span>–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è (%)</span>
                <span>–ö–∞—á–µ—Å—Ç–≤–æ (NDCG)</span>
                <span>–ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–æ–≤–∞—Ä–æ–≤</span>
                <span>–°–∫–æ—Ä–æ—Å—Ç—å (–º—Å)</span>
              </div>
              {algorithmMetrics.map(metric => (
                <div key={metric.algorithm} className="table-row">
                  <div className="algorithm-cell">
                    <span className="algorithm-name" style={{ color: metric.color }}>
                      {metric.algorithm}
                    </span>
                    <span className="algorithm-description">{metric.description}</span>
                  </div>
                  <span className="metric-value">
                    {metric.hitRate.toFixed(1)}%
                    {metric.algorithm === 'Popularity' && <span className="metric-badge best">–õ—É—á—à–∏–π</span>}
                  </span>
                  <span className="metric-value">
                    {metric.ndcg.toFixed(1)}
                    {metric.algorithm === 'Popularity' && <span className="metric-badge best">–õ—É—á—à–∏–π</span>}
                  </span>
                  <span className="metric-value">
                    {metric.coverage}
                    {metric.algorithm === 'Hybrid' && <span className="metric-badge best">–õ—É—á—à–∏–π</span>}
                  </span>
                  <span className="metric-value">
                    {metric.latency}ms
                    <span className={`metric-badge ${metric.latency <= 20 ? 'good' : metric.latency <= 35 ? 'ok' : 'slow'}`}>
                      {metric.latency <= 20 ? '–ë—ã—Å—Ç—Ä–æ' : metric.latency <= 35 ? '–ù–æ—Ä–º–∞' : '–ú–µ–¥–ª–µ–Ω–Ω–æ'}
                    </span>
                  </span>
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* –°–µ–∫—Ü–∏—è 3: –¢–û–ü —Ç–æ–≤–∞—Ä—ã */}
        <section className="top-products-section">
          <h2>üõí –¢–û–ü —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã</h2>
          <div className="top-products-chart">
            {topProducts.map((product, idx) => (
              <div key={product.product_id} className="product-bar">
                <div className="product-info">
                  <span className="product-rank">#{idx + 1}</span>
                  <span className="product-title">{product.title}</span>
                  <span className="product-brand">{product.brand}</span>
                </div>
                <div className="product-metrics">
                  <div 
                    className="recommendation-bar"
                    style={{ 
                      width: `${(product.recommendation_count / 160) * 100}%`,
                      backgroundColor: ALGORITHM_COLORS.Hybrid 
                    }}
                  ></div>
                  <span className="recommendation-count">{product.recommendation_count}</span>
                </div>
              </div>
            ))}
          </div>
        </section>
      </div>
    </div>
  )
}

export default RecommendationsPage
