"""
Simple Real Users API
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

from fastapi import APIRouter, Depends, HTTPException, Query
from typing import List, Dict, Any, Optional
import logging
import sys
import os
from datetime import datetime, date

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', 'shared'))
from database.connection import SessionLocal

logger = logging.getLogger(__name__)
router = APIRouter()


def get_db():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


@router.get("/simple-real-users")
async def get_simple_real_users(
    limit: int = Query(100, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", le=1000),
    snapshot_date: Optional[str] = Query(None, description="–î–∞—Ç–∞ —Å–Ω–∞–ø—à–æ—Ç–∞ (YYYY-MM-DD)"),
    db = Depends(get_db)
) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —Ñ–∏—á–∞–º–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
        if snapshot_date is None:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –∏–∑ –±–∞–∑—ã
            from sqlalchemy import text
            date_result = db.execute(text("SELECT MAX(snapshot_date) FROM ml_user_features_daily_all"))
            max_date_row = date_result.fetchone()
            snapshot_date = max_date_row[0].isoformat() if max_date_row and max_date_row[0] else "2025-09-15"
        
        logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ {limit} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è snapshot_date={snapshot_date}")
        
        # –ü—Ä–æ—Å—Ç–æ–π SQL –∑–∞–ø—Ä–æ—Å
        query = """
        SELECT 
            f.user_id,
            COALESCE(f.recency_days, 0) as recency_days,
            COALESCE(f.frequency_90d, 0) as frequency_90d,
            COALESCE(f.monetary_180d, 0) as monetary_180d,
            COALESCE(f.aov_180d, 0) as aov_180d,
            COALESCE(f.orders_lifetime, 0) as orders_lifetime,
            COALESCE(f.revenue_lifetime, 0) as revenue_lifetime,
            COALESCE(f.categories_unique, 0) as categories_unique
        FROM ml_user_features_daily_all f
        WHERE f.snapshot_date = %s
          AND f.orders_lifetime >= 1
        ORDER BY f.orders_lifetime DESC, f.monetary_180d DESC
        LIMIT %s
        """
        
        from sqlalchemy import text
        result = db.execute(text(query), (snapshot_date, limit))
        rows = result.fetchall()
        
        if not rows:
            return {
                "users": [],
                "total_count": 0,
                "snapshot_date": snapshot_date,
                "message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"
            }
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
        users = []
        for row in rows:
            user_data = {
                "user_id": int(row[0]),
                "snapshot_date": snapshot_date,
                "features": {
                    "recency_days": float(row[1]),
                    "frequency_90d": int(row[2]),
                    "monetary_180d": float(row[3]),
                    "aov_180d": float(row[4]),
                    "orders_lifetime": int(row[5]),
                    "revenue_lifetime": float(row[6]),
                    "categories_unique": int(row[7])
                },
                "explanation": generate_simple_explanation({
                    "recency_days": float(row[1]),
                    "frequency_90d": int(row[2]),
                    "monetary_180d": float(row[3]),
                    "aov_180d": float(row[4]),
                    "orders_lifetime": int(row[5]),
                    "revenue_lifetime": float(row[6]),
                    "categories_unique": int(row[7])
                })
            }
            users.append(user_data)
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        return {
            "users": users,
            "total_count": len(users),
            "snapshot_date": snapshot_date
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


def generate_simple_explanation(features: Dict[str, Any]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    explanations = []
    
    # –ê–Ω–∞–ª–∏–∑ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    orders_lifetime = features.get('orders_lifetime', 0)
    if orders_lifetime >= 10:
        explanations.append(f"{orders_lifetime} –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è")
    elif orders_lifetime >= 5:
        explanations.append(f"–∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç ({orders_lifetime} –∑–∞–∫–∞–∑–æ–≤)")
    elif orders_lifetime >= 2:
        explanations.append(f"–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–µ–Ω—Ç ({orders_lifetime} –∑–∞–∫–∞–∑–∞)")
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    recency_days = features.get('recency_days', 999)
    if recency_days <= 30:
        explanations.append(f"–ø–æ–∫—É–ø–∞–ª –Ω–µ–¥–∞–≤–Ω–æ ({int(recency_days)} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)")
    elif recency_days <= 90:
        explanations.append(f"–ø–æ–∫—É–ø–∞–ª –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    categories_unique = features.get('categories_unique', 0)
    if categories_unique >= 5:
        explanations.append(f"–ø–æ–∫—É–ø–∞–µ—Ç –≤ {categories_unique} –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö")
    elif categories_unique >= 3:
        explanations.append(f"—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏")
    
    return ", ".join(explanations[:2]) if explanations else "–Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç"
